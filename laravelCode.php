<?php
    //has the template for generating node files

    class laravelCode
    {
        public $dir_name = 'larvavel/eloquent/';
        public $index_file_name = 'index.php';
        public $output_dir = './laravelModels'; //this has to be here... its set from the outside!!

    public $ORM_file_content = [];
        public $ORM_base_file_content = [];
        public $ORM_process_file_content = [];

        public $ORM_file_name = [];
        public $ORM_base_file_name = [];
        public $ORM_process_file_name = [];

        public $overwrite = false;

        public $debug = true;
        public $c = ''; //comma character starts life as an empty string...
    public $other_tables = []; //where we store our table names..
    public $links_js = '';
        public $map = [];

        public $relations = [];

    //var $namespace = 'namespace nod\orm;';
    //var $namespace = 'namespace App/Models;';
    public $namespace = '';

        public function generate($table_data)
        {
            $object_name = $table_data['object_name'];
            $table_name = $table_data['table_name'];
            $database = $table_data['database'];
            $object_label = $table_data['object_label'];
            $has_many = $table_data['has_many'];
            $belongs_to = $table_data['belongs_to'];

            $file_name = "$object_name.php";
            $full_file = "$this->output_dir/$file_name";
            $this->ORM_file_name[$object_name] = $full_file;

            $base_file_name = "$object_name".'Base.php';
            $full_base_file = "$this->output_dir/$base_file_name";
            $this->ORM_base_file_name[$object_name] = $full_base_file;

            $process_file_name = "$object_name.log";
            $full_process_file = "$this->output_dir/$process_file_name";
            $this->ORM_process_file_name[$object_name] = $full_process_file;

            $this->each_table_start($table_data);

        //this is just for logging the process...
        $this->ORM_process_file_content[$object_name] = "Object $object_name has_many:\n";
            $this->ORM_process_file_content[$object_name] .= var_export($has_many, true);
            $this->ORM_process_file_content[$object_name] .= "Object $object_name belongs_to:\n";
            $this->ORM_process_file_content[$object_name] .= var_export($belongs_to, true);
/*
        foreach($table_data['table_cols'] as $col){
            $this->each_col(array(
                'object_name' => $object_name,
                'table_name' => $table_name,
                'database' => $database,
                'object_label' => $object_label,
                'col_name' => $col,
                ));
        }
*/

        $this->each_table_end($table_data);
            $this->write_file($object_name);
        }

        public function each_table_start($table_data)
        {
            $object_name = $table_data['object_name'];
            $table_name = $table_data['table_name'];
            $database = $table_data['database'];
            $object_label = $table_data['object_label'];

            $namespace = $this->namespace;

                //start headers...
        $this->ORM_file_content[$object_name] = "<?php
	$namespace

	class $object_name extends  $object_name".'Base{ 
		//put custom code here... look in the base class for generated relations..
		
	}

?>';
            $this->ORM_base_file_content[$object_name] = "<?php
//Generated by buildORM from the $database:$table_name

	$namespace

	class $object_name"."Base extends BaseORM{ //which extends Eloquent...

		var \$table = '$table_name';

		protected \$guarded = array(); //everything can be added via auto-fill... override this in custom code...
		
";

//		$this->index_text .= "\n//importing $object_name from table $database:$this_table\n";
//		$this->index_text .= "var $object_name = sequelize.import(__dirname + '/$this_file_name');\n";
//		$this->index_text .= "exports.$object_name = $object_name;\n";
        }

        public function each_table_end($table_data)
        {
            $object_name = $table_data['object_name'];
            $table_name = $table_data['table_name'];
            $database = $table_data['database'];
            $object_label = $table_data['object_label'];
            $has_many = $table_data['has_many'];
            $belongs_to = $table_data['belongs_to'];

//		echo "\n\n\n has many \n\n";
//		var_export($has_many);
//		echo "\n\n\n belongs to \n\n";
//		var_export($belongs_to);

        foreach ($belongs_to as $key => $belongs_to_array) {
            $prefix = $belongs_to_array['prefix'];
            $type = $belongs_to_array['type'];

            if ($prefix == $type) {
                $function_name = $type;
            } else {
                $function_name = $prefix.'_'.$type;
            }
            $link_field = strtolower($function_name.'_id');

            $this->ORM_base_file_content[$object_name] .= "
        //autogenerated this function... 
        public function $function_name()
        {
                return \$this->belongs_to('$type','$link_field');
        }

";
        }

            foreach ($has_many as $key => $has_many_array) {
                $prefix = $has_many_array['prefix'];
                $type = $has_many_array['type'];

                if ($prefix == $object_name) {
                    $link_field = $prefix.'_id';
                    $function_name = $type.'_bunch';
                } else {
                    $link_field = $prefix.'_'.$type.'_id';
                    $function_name = $type."_from_$prefix".'_bunch';
                }

                $link_field = strtolower($link_field);

                $this->ORM_base_file_content[$object_name] .= "
        //autogenerated this function... 
        public function $function_name()
        {
                return \$this->hasMany('$type',$link_field);
               // return \$this->hasOne('$type',$link_field);
        }

";
            }

            $this->ORM_base_file_content[$object_name] .= "
	}//the end of class $object_name		
?>";
        }

        public function write_file($object_name)
        {
            //always write the auto-generated stuff..
        file_put_contents($this->ORM_base_file_name[$object_name], $this->ORM_base_file_content[$object_name]);
        //always write the generate log for this file...
        file_put_contents($this->ORM_process_file_name[$object_name], $this->ORM_process_file_content[$object_name]);
            if (!file_exists($this->ORM_file_name[$object_name]) || $this->overwrite) {
                //but only write the child class if it does not already exist...
            //unless we are overwriting everything...
            //so that user customizations are remembered.
            file_put_contents($this->ORM_file_name[$object_name], $this->ORM_file_content[$object_name]);
            }
        }
    }//end class
